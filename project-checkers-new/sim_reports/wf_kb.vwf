/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 10000.0;
	SIMULATION_TIME = 10000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("b_sel")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("code_read")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("down_key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("hash")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("kb_freeze")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode_kt")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode_kt[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode_kt";
}

SIGNAL("keycode_kt[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode_kt";
}

SIGNAL("keycode_kt[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode_kt";
}

SIGNAL("keycode_kt[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode_kt";
}

SIGNAL("left_key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("nrst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("right_key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("select_key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("up_key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("w_sel")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("b_sel")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 399.46;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 0.171;
			LEVEL 0 FOR 240.0;
			LEVEL 1 FOR 79.829;
			LEVEL 0 FOR 960.0;
		}
		LEVEL 1 FOR 0.171;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 79.829;
		LEVEL 0 FOR 320.54;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 500;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("code_read")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("down_key")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 717.512;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 79.275;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 0.223;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 0.502;
			LEVEL 0 FOR 960.0;
		}
		LEVEL 1 FOR 79.275;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 0.223;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 0.502;
		LEVEL 0 FOR 2.488;
	}
}

TRANSITION_LIST("hash")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1276.66;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 1200.0;
		}
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 963.34;
	}
}

TRANSITION_LIST("kb_freeze")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("key")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 64.0;
			LEVEL 1 FOR 16.0;
			NODE
			{
				REPEAT = 123;
				LEVEL 0 FOR 64.0;
				LEVEL 1 FOR 16.0;
			}
			LEVEL 0 FOR 64.0;
			LEVEL 1 FOR 16.0;
		}
	}
}

TRANSITION_LIST("keycode_kt[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 680.0;
		LEVEL 1 FOR 640.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 360.0;
	}
}

TRANSITION_LIST("keycode_kt[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 360.0;
		LEVEL 1 FOR 320.0;
		NODE
		{
			REPEAT = 14;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("keycode_kt[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 160.0;
		NODE
		{
			REPEAT = 30;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("keycode_kt[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 80.0;
		NODE
		{
			REPEAT = 61;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("left_key")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.578;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 79.224;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 0.251;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 0.525;
			LEVEL 0 FOR 960.0;
		}
		LEVEL 1 FOR 79.224;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 0.251;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 0.525;
		LEVEL 0 FOR 322.422;
	}
}

TRANSITION_LIST("nrst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 10000.0;
	}
}

TRANSITION_LIST("right_key")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 558.624;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 79.715;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 0.285;
			LEVEL 0 FOR 1120.0;
		}
		LEVEL 1 FOR 79.715;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 0.285;
		LEVEL 0 FOR 321.376;
	}
}

TRANSITION_LIST("select_key")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 479.361;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 1200.0;
		}
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 480.639;
	}
}

TRANSITION_LIST("up_key")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 238.38;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 79.733;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 0.267;
			LEVEL 0 FOR 1120.0;
		}
		LEVEL 1 FOR 79.733;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 0.267;
		LEVEL 0 FOR 641.62;
	}
}

TRANSITION_LIST("w_sel")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 159.36;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 79.822;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 0.372;
			LEVEL 0 FOR 1039.806;
		}
		LEVEL 1 FOR 79.822;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 0.372;
		LEVEL 0 FOR 640.446;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nrst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "code_read";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "kb_freeze";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_kt";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
	CHILDREN = 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_kt[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_kt[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_kt[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_kt[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "left_key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "right_key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "select_key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "up_key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "down_key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "w_sel";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "b_sel";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "hash";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 17;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 25950;
	MASTER = TRUE;
}
;
