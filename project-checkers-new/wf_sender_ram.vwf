/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 20000.0;
	SIMULATION_TIME = 3800.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

USER_TYPE("__Game:inst1|state")
{
	VALUES = "Undefined", "state.S_Wait";
}

USER_TYPE("__tx_module:inst2|state")
{
	VALUES = "Undefined", "state.tx_idle", "state.tx_start", "state.tx_shift", "state.tx_stop";
}

USER_TYPE("__rx_module2:inst3|state")
{
	VALUES = "Undefined", "state.rx_idle";
}

USER_TYPE("__protocol_tx:inst4|state")
{
	VALUES = "Undefined", "state.pr_wait", "state.pr_rdy", "state.pr_s1", "state.pr_w1", "state.pr_s2", "state.pr_w2", "state.pr_check_data", "state.pr_set_TX";
}

USER_TYPE("__protocol_rx:inst5|state")
{
	VALUES = "Undefined", "state.pr_ini", "state.pr_w1";
}

USER_TYPE("__Main:inst8|state")
{
	VALUES = "Undefined", "state.S_Wait", "state.S_Start", "state.S_P_First", "state.S_Ready_Game";
}

SIGNAL("nrst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode1[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode1";
}

SIGNAL("keycode1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode1";
}

SIGNAL("keycode1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode1";
}

SIGNAL("keycode1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode1";
}

SIGNAL("Game:inst1|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__Game:inst1|state";
}

SIGNAL("tx_module:inst2|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__tx_module:inst2|state";
}

SIGNAL("rx_module2:inst3|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__rx_module2:inst3|state";
}

SIGNAL("protocol_tx:inst4|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__protocol_tx:inst4|state";
}

SIGNAL("protocol_rx:inst5|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__protocol_rx:inst5|state";
}

SIGNAL("Main:inst8|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__Main:inst8|state";
}

SIGNAL("serial_cable")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("hash")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Turn")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("nrst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 19960.0;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1000;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("key")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 160.0;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 19680.0;
	}
}

TRANSITION_LIST("keycode1[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 280.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 19680.0;
	}
}

TRANSITION_LIST("keycode1[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 280.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 19680.0;
	}
}

TRANSITION_LIST("keycode1[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 280.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 19680.0;
	}
}

TRANSITION_LIST("keycode1[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 19680.0;
	}
}

TRANSITION_LIST("Game:inst1|state")
{
	NODE
	{
		REPEAT = 1;
			LEVEL state.S_Wait FOR 3800.0;
	}
}

TRANSITION_LIST("tx_module:inst2|state")
{
	NODE
	{
		REPEAT = 1;
		LEVEL state.tx_idle FOR 352.912;
		LEVEL state.tx_start FOR 100.0;
		LEVEL state.tx_shift FOR 800.0;
		LEVEL state.tx_stop FOR 100.0;
		LEVEL state.tx_idle FOR 60.0;
		LEVEL state.tx_start FOR 100.0;
		LEVEL state.tx_shift FOR 800.0;
		LEVEL state.tx_stop FOR 100.0;
		LEVEL state.tx_idle FOR 1387.088;
	}
}

TRANSITION_LIST("rx_module2:inst3|state")
{
	NODE
	{
		REPEAT = 1;
				LEVEL state.rx_idle FOR 52.932;
		LEVEL Undefined FOR 3747.068;
	}
}

TRANSITION_LIST("protocol_tx:inst4|state")
{
	NODE
	{
		REPEAT = 1;
		LEVEL state.pr_wait FOR 312.91;
		LEVEL state.pr_rdy FOR 20.0;
		LEVEL Undefined FOR 0.001;
		LEVEL state.pr_s1 FOR 20.0;
		LEVEL state.pr_w1 FOR 1040.0;
		LEVEL Undefined FOR 0.006;
		LEVEL state.pr_s2 FOR 19.994;
		LEVEL Undefined FOR 0.006;
		LEVEL state.pr_w2 FOR 1039.994;
		LEVEL state.pr_check_data FOR 20.0;
		LEVEL state.pr_set_TX FOR 19.999;
		LEVEL Undefined FOR 0.001;
		LEVEL state.pr_wait FOR 1307.089;
	}
}

TRANSITION_LIST("protocol_rx:inst5|state")
{
	NODE
	{
		REPEAT = 1;
				LEVEL state.pr_ini FOR 52.931;
		LEVEL state.pr_w1 FOR 3747.069;
	}
}

TRANSITION_LIST("Main:inst8|state")
{
	NODE
	{
		REPEAT = 1;
			LEVEL state.S_Wait FOR 3800.0;
	}
}

TRANSITION_LIST("serial_cable")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 378.496;
		LEVEL 0 FOR 200.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
		}
		LEVEL 1 FOR 260.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 1561.504;
	}
}

TRANSITION_LIST("hash")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 298.177;
		LEVEL 1 FOR 28.93;
		LEVEL 0 FOR 3472.893;
	}
}

TRANSITION_LIST("Turn")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 3800.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nrst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5, 6, 7;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Game:inst1|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "tx_module:inst2|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "rx_module2:inst3|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "protocol_tx:inst4|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "protocol_rx:inst5|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Main:inst8|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "serial_cable";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "hash";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Turn";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 26600;
	MASTER = TRUE;
}
;
