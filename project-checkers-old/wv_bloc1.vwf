/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000000.0;
	SIMULATION_TIME = 10000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

USER_TYPE("__Game:inst1|state")
{
	VALUES = "Undefined", "state.S_Wait", "state.S_New_Game", "state.S_Turn";
}

USER_TYPE("__tx_module:inst2|state")
{
	VALUES = "Undefined", "state.tx_idle", "state.tx_start", "state.tx_shift", "state.tx_stop";
}

USER_TYPE("__rx_module2:inst3|state")
{
	VALUES = "Undefined", "state.rx_idle", "state.rx_start", "state.rx_shift", "state.rx_stop";
}

USER_TYPE("__protocol_tx:inst4|state")
{
	VALUES = "Undefined", "state.pr_wait", "state.pr_rdy", "state.pr_s1", "state.pr_w1", "state.pr_s2", "state.pr_w2", "state.pr_check_data", "state.pr_set_TX", "state.pr_wh";
}

USER_TYPE("__protocol_rx:inst5|state")
{
	VALUES = "Undefined", "state.pr_ini", "state.pr_w1", "state.pr_r1", "state.pr_w2", "state.pr_r2", "state.pr_f_type", "state.pr_s_rdy";
}

USER_TYPE("__tx_module:inst6|state")
{
	VALUES = "Undefined", "state.tx_idle", "state.tx_start", "state.tx_shift", "state.tx_stop";
}

USER_TYPE("__rx_module2:inst7|state")
{
	VALUES = "Undefined", "state.rx_idle", "state.rx_start", "state.rx_shift", "state.rx_stop";
}

USER_TYPE("__Main:inst8|state")
{
	VALUES = "Undefined", "state.S_Wait", "state.S_P_First", "state.S_You_Chose_White", "state.S_Send_White", "state.S_Ready_Game", "state.S_New_Game", "state.S_Change_Turn", "state.S_Wait_Turn";
}

USER_TYPE("__Game:inst17|state")
{
	VALUES = "Undefined", "state.S_Wait", "state.S_New_Game", "state.S_Turn";
}

USER_TYPE("__protocol_tx:inst21|state")
{
	VALUES = "Undefined", "state.pr_wait", "state.pr_rdy", "state.pr_s1", "state.pr_w1", "state.pr_s2", "state.pr_w2", "state.pr_check_data", "state.pr_set_TX";
}

USER_TYPE("__protocol_rx:inst22|state")
{
	VALUES = "Undefined", "state.pr_ini", "state.pr_w1", "state.pr_r1", "state.pr_w2", "state.pr_r2", "state.pr_f_type", "state.pr_s_rdy", "state.pr_s_wh";
}

USER_TYPE("__Main:inst23|state")
{
	VALUES = "Undefined", "state.S_Wait", "state.S_Start", "state.S_Op_First", "state.S_Ready_Game", "state.S_New_Game", "state.S_Change_Turn", "state.S_Wait_Turn";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("hash")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode1[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode1";
}

SIGNAL("keycode1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode1";
}

SIGNAL("keycode1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode1";
}

SIGNAL("keycode1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode1";
}

SIGNAL("nrst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Game:inst1|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__Game:inst1|state";
}

SIGNAL("Main:inst8|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__Main:inst8|state";
}

SIGNAL("divider 2611")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Game:inst1|you_are_white")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("Main:inst8|state.S_Send_White")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("Main:inst8|state.S_You_Chose_White")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("Main:inst8|white_int")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("Turn")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("S1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("piece[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("piece[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("piece[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("S2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendF[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendF[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendF[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendX[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendX[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendX[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendY[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendY[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sendY[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50000;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("hash")
{
	NODE
	{
		REPEAT = 1;
				LEVEL 0 FOR 597.615;
		LEVEL 1 FOR 9402.385;
	}
}

TRANSITION_LIST("key")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 220.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 999380.0;
	}
}

TRANSITION_LIST("keycode1[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 560.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 999360.0;
	}
}

TRANSITION_LIST("keycode1[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 560.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 999360.0;
	}
}

TRANSITION_LIST("keycode1[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 560.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 999360.0;
	}
}

TRANSITION_LIST("keycode1[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 999360.0;
	}
}

TRANSITION_LIST("nrst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 999840.0;
	}
}

TRANSITION_LIST("Game:inst1|state")
{
	NODE
	{
		REPEAT = 1;
				LEVEL state.S_Wait FOR 712.893;
		LEVEL Undefined FOR 9287.107;
	}
}

TRANSITION_LIST("Main:inst8|state")
{
	NODE
	{
		REPEAT = 1;
				LEVEL state.S_Wait FOR 172.923;
		LEVEL Undefined FOR 9827.077;
	}
}

TRANSITION_LIST("Game:inst1|you_are_white")
{
	NODE
	{
		REPEAT = 1;
				LEVEL 0 FOR 692.902;
		LEVEL X FOR 9307.098;
	}
}

TRANSITION_LIST("Main:inst8|state.S_Send_White")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("Main:inst8|state.S_You_Chose_White")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("Main:inst8|white_int")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 352.924;
		LEVEL 1 FOR 300.0;
		LEVEL X FOR 9347.076;
	}
}

TRANSITION_LIST("Turn")
{
	NODE
	{
		REPEAT = 1;
				LEVEL 0 FOR 697.3;
		LEVEL X FOR 9302.7;
	}
}

TRANSITION_LIST("S1")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("piece[2]")
{
	NODE
	{
		REPEAT = 1;
				LEVEL 0 FOR 36.96;
		LEVEL 1 FOR 9963.04;
	}
}

TRANSITION_LIST("piece[1]")
{
	NODE
	{
		REPEAT = 1;
				LEVEL 0 FOR 36.973;
		LEVEL 1 FOR 9963.027;
	}
}

TRANSITION_LIST("piece[0]")
{
	NODE
	{
		REPEAT = 1;
				LEVEL 0 FOR 37.745;
		LEVEL 1 FOR 9962.255;
	}
}

TRANSITION_LIST("S2")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendF[2]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendF[1]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendF[0]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendX[2]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendX[1]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendX[0]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendY[2]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendY[1]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

TRANSITION_LIST("sendY[0]")
{
	NODE
	{
		REPEAT = 1;
			LEVEL 0 FOR 10000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nrst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "hash";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
	CHILDREN = 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "keycode1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "Game:inst1|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "divider 2611";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
	IS_DIVIDER = ON;
}

DISPLAY_LINE
{
	CHANNEL = "Main:inst8|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Game:inst1|you_are_white";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Main:inst8|state.S_Send_White";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Main:inst8|state.S_You_Chose_White";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Main:inst8|white_int";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Turn";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "S1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "piece[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "piece[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "piece[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "S2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendF[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendF[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendF[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendX[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendX[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendX[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendY[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendY[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sendY[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 11475;
	MASTER = TRUE;
}
;
